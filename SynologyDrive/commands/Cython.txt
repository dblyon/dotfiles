###############################################################################
##### Cython module - compiling
http://docs.cython.org/src/quickstart/build.html

1. Cython module
--> hello.pyx

2. Setup file
--> setup.py

from distutils.core import setup
from Cython.Build import cythonize

setup(
    name = "Hello", 
    ext_modules = cythonize("hello.pyx"),
    )
        
3. Compile the file
python setup.py build_ext --inplace -c mingw64

Zeus
python setup.py build_ext --inplace

4. Use *.pyd file (Win7) 

###############################################################################
##### Profiling Python Code
Profiling in shell:
python -m cProfile -s cumulative myscript.py > outputfile.txt
python -m cProfile -s cumulative myscript.py > outputfile.txt

#in python
import cProfile
p = cProfile.Profile(timeunit = 0.00001)
stat = p.run("python statement") #stat = p.run("run_experimentfile.runcamelcropper()")
# alles was in if __name__ == "__main__" --> in function und die dann über python statement aufrufen.
stat.getstats()


1. profile program
python -m cProfile -o prof.out run_experimentfile.py

2. convert the output file with pyprof2calltree
pyprof2calltree -i prof.out -o prof.calltree

3. and launch KCachegrind
kcachegrind prof.calltree # or qcachegrind prof.calltree


Profiling Cython:
cython -a anchor_15N_cythonized.pyx # --> produces anchor_15N_cythonized.html



###############################################################################
##### Pandas equality check of 2 DataFrames
import pandas as pd
fn1=r"C:\Users\dblyon\BTSync\PD_Shoots_20130513fasta\res\CCInput_shoots_ALL_techrepEVAL_v2_num.txt
df1 = pd.read_csv(fn1, sep="\t")
fn2=r"C:\Users\dblyon\BTSync\PD_Shoots_20130513fasta\res\CCInput_shoots_ALL_techrepEVAL_v4_num.txt
df2= pd.read_csv(fn2, sep="\t")
from pandas.util.testing import assert_frame_equal
assert_frame_equal(df1, df2)