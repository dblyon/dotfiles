##########################################################################################
### Profiling for qcachegrind
pyprof2calltree -i POST.results.017155ms.1510870599.prof -o old_version.prof
qcachegrind old_version.prof
pyprof2calltree -i POST.results.018742ms.1510878721.prof -o fisher_cython.prof
qcachegrind fisher_cython.prof

##########################################################################################
### Profiling in shell
python -m cProfile -s cumulative myscript.py > outputfile.txt
look at text

python -m cProfile -o <output_filename> <normal stuff here>
pyprof2calltree -i import.prof -o import.callgrind
Open QCacheGrind.app, hit "Open" & pull in your profiling data!

python -m cProfile -o cluster_filter.prof cluster_filter.py
pyprof2calltree -i cluster_filter.prof -o cluster_filter.callgrind
qcachegrind cluster_filter.callgrind # Open QCacheGrind.app



Ipython:
set_printoptions(precision=3)

########################################################################################## 
#### Pandas 
# equality check of 2 DataFrames
import pandas as pd
fn1=r"C:\Users\dblyon\BTSync\PD_Shoots_20130513fasta\res\CCInput_shoots_ALL_techrepEVAL_v2_num.txt
df1 = pd.read_csv(fn1, sep="\t")
fn2=r"C:\Users\dblyon\BTSync\PD_Shoots_20130513fasta\res\CCInput_shoots_ALL_techrepEVAL_v4_num.txt
df2= pd.read_csv(fn2, sep="\t")
from pandas.util.testing import assert_frame_equal
assert_frame_equal(df1, df2)



###############################################################################
# Starting other programs instead of piping:
"""
os.execv(program, commandlinesequence)
The basic “v” exec form is passed an executable program’s name, along with a list
or tuple of command-line argument strings used to run the executable (that is, the
words you would normally type in a shell to start a program).

Adding the letter p to the execv and execl names means that Python will locate the
executable’s directory using your system search-path setting (i.e., PATH).
"""
import os
os.execvp("blastp", ["-h"])
##########################################################################################


### BOOK High Performance Programming
# Mistakes/Errors
page 32/41
In [4]: a = np.array([1, 2, 3], dtype='float32')
In [5]: a.astype('float32')
Out[5]: array([ 0., 1., 2.], dtype=float32)
--> should be Out[5]: array([ 1., 2., 3.], dtype=float32)



##########################################################################################
# Urllib retrieve stuff from the internet
fn_out = r'/Users/dblyon/Downloads/test.tsv'
path2file = r',,,,'
data = { 'button': 'Save in file', 'tax': open(path2file).read() }
data=urllib.urlencode(data)
urllib.urlretrieve('http://www.ncbi.nlm.nih.gov/Taxonomy/TaxIdentifier/tax_identifier.cgi', fn_out, data=data)



##########################################################################################
### Debugging
# import ipdb; ipdb.set_trace()
http://stackoverflow.com/questions/16867347/step-by-step-debugging-with-ipython


##########################################################################################
### Urllib
fn_out = r'/Users/dblyon/Downloads/test.tsv'
path2file = r',,,,'
data = { 'button': 'Save in file', 'tax': open(path2file).read() }
data=urllib.urlencode(data)
urllib.urlretrieve('http://www.ncbi.nlm.nih.gov/Taxonomy/TaxIdentifier/tax_identifier.cgi', fn_out, data=data)


##########################################################################################
### pip not found and brew doesn't have access rights
brew list python | grep pip
which -a python
cd /usr/local/lib/python2.7
sudo chown -R dblyon:admin site-packages
sudo chown -R dbl:wheel 2.7/
sudo chown -R dbl:admin /usr/local/bin/
sudo chown -R dblyon:admin /usr/local/bin/
sudo chown -R dblyon:admin /usr/local/share/

##########################################################################################
##### Virtual environments
# create the environment
/Users/dblyon/python-virtual-environments
virtualenv env
# activate the environment
source env/bin/activate
deactivate



##########################################################################################
jupyter notebook --NotebookApp.iopub_data_rate_limit=10000000000

