# build image from Dockerfile (-tag repository_name:tag from_local_Dockerfile)
docker build -t agotooldocker:agotool .

# run container
docker run -p 5000:5000 agotooldocker:agotool python /agotool/runserver.py

docker run -v /Users/dblyon/modules/cpr/metaprot/sql/tables:/tables agotooldocker:agotool ls -la /tables
docker run -v /Users/dblyon/modules/cpr/metaprot/sql/tables:/tables agotooldocker:agotool /agotool/create_db.sh

docker run -i -t -v /Users/dblyon/modules/cpr/metaprot/sql/tables:/tables -p 5000:5000 agotooldocker:agotool
docker run -d -v /Users/dblyon/modules/cpr/metaprot/sql/tables:/tables -p 5000:5000 agotooldocker:agotool

docker run -i -t -v /Volumes/SPEEDY/tables:/tables -p 5000:5000 agotooldocker:agotool

service postgresql start
su postgres -c "createuser admin"
createdb metaprot -O admin;
createdb test -O admin;
python /agotool/static/python/models.py
python /agotool/runserver.py

# works
su postgres
psql postgres
\password postgres # no password
#?? WHY doesn't this work ??
su postgres psql postgres

CREATE DATABASE metaprot OWNER postgres;
CREATE DATABASE test OWNER postgres;
#psql -U postgres metaprot < metaprot_agotool.pgsql
#or create from scratch by running
chmod -R 777 /agotool
python /agotool/static/python/models.py

docker build --rm -t dblyon/postgresql .

#######################################
### delete all images and containers
eval $(docker-machine env -u)
docker rm $(docker ps -a -q)
docker rm -f $(docker ps -aq)
docker rmi -f $(docker images -q)
docker volume rm $(docker volume ls -q)
### kill all running containers
docker kill $(docker ps -q)

su postgres psql postgres
postgres -D /agotool

docker build -t agotooldocker:agotool .

#docker run -d -p 5000:5000 agotooldocker:agotool tail -f /dev/null
#docker ps
#docker attach container_id

docker run -d -P --name test_sshd agotooldocker:agotool
docker port test_sshd 22
ssh root@192.168.1.2 -p 32768

"/Users/dblyon/modules/cpr/metaprot/sql/tables/test"

# start docker-machine
docker-machine start default
docker-machine env
# select image and run as container
docker run -d -p 8000:80 nginx


# find running docker containers
docker ps # --> list running containers
docker stop containername

docker-machine stop manager

docker-machine env default

#
docker run # create new container from image and start container
docker start # start existing container


# list images
docker images

docker-machine ls
docker ps

# You can create and manage as many local VMs running Docker as you please; just run "docker-machine create" again.
# All created machines will appear in the output of docker-machine ls.

# start and stop machines
docker-machine stop default
docker-machine start default



# This command downloads a lightweight Linux distribution (boot2docker) with the Docker daemon installed, and creates and starts a VirtualBox VM with Docker running.
docker-machine create --driver virtualbox default
# List available machines again to see your newly minted machine.
docker-machine ls
# Get the environment commands for your new VM.
docker-machine env default
# Connect your shell to the new machine.
eval "$(docker-machine env default)"
# Run containers and experiment with machine commands
docker run busybox echo hello world
# Get the host IP address.
docker-machine ip default

# Run a Nginx webserver in a container with the following command:
docker run -d -p 8000:80 nginx
# you can hit the server at port 8000 on the IP address given to you by docker-machine ip
curl $(docker-machine ip default):8000  # equals: curl 192.168.99.100:8000

##########################################################################################
######## commands used in combi with adapted flask psql example # only for working commands
docker-machine create -d virtualbox default
    docker-machine stop default
    docker-machine start default
docker-machine env default
eval "$(docker-machine env default)"

docker-compose build
docker-compose up -d
docker-machine ip default # 192.168.99.100

psql -h 192.168.99.100 -p 5432 -U postgres --password
# pw: postgres
# try: createuser --interactive dblyon
# try: CREATE DATABASE metaprot OWNER dblyon;
CREATE DATABASE metaprot
psql -h 192.168.99.100 -p 5432 -U postgres metaprot < ../metaprot_agotool.pgsql

docker-compose run web /usr/local/bin/python create_db.py
docker-compose run web /usr/local/bin/python test.py
docker-compose stop

##########################################################################################



##########################################################################################
#### https://realpython.com/blog/python/dockerizing-flask-with-compose-and-machine-from-localhost-to-the-cloud/
# start Docker Machine
docker-machine create -d virtualbox dev;
# Now just point the Docker client at the dev machine via
eval "$(docker-machine env dev)"
docker-machine ls
# Next, let’s fire up the containers with Docker Compose and get the Flask app and Postgres database up and running.
# Now, to get the containers running, build the images and then start the services:
docker-compose build
docker-compose up -d
# We also need to create the database table:
docker-compose run web /usr/local/bin/python create_db.py
# To see which environment variables are available to the web service, run:
docker-compose run web env
# To view the logs:
docker-compose logs
# enter the Postgres Shell
psql -h 192.168.99.100 -p 5432 -U postgres --password
# stop the processes
docker-compose stop

eval "$(docker-machine env production)"

docker-machine create -d virtualbox default
docker-machine create -d virtualbox dockeragotool
docker-machine env dockeragotool
eval "$(docker-machine env dockeragotool)"
docker-machine ip dockeragotool
docker-compose build
docker-compose up -d
# docker-compose run web /usr/local/bin/python create_db.py --> ToDo modify


docker-machine create -d virtualbox default

psql -h 192.168.99.100 -p 5432 -U postgres --password # pw: postgres



##########################################################################################
### docker_agotool_threecontainers
docker-machine create -d virtualbox default;
eval "$(docker-machine env default)"
docker-compose build
docker-compose up -d
docker-machine ip
--> 192.168.99.100
--> 192.168.99.100:5000

docker-compose run --rm web bash ./create_db.sh
docker-compose run -v /Volumes/SPEEDY/tables/test:/tables --rm web bash ./create_db.sh
docker run -i -t -v /Volumes/SPEEDY/tables/test:/tables web bash ./create_db.sh

docker-compose run —rm web python instance/db_create.py
docker-compose run —rm web python create.py

psql -h 127.0.0.1 -p 5432 -U postgres --password
### this works:
docker run -i -t dockeragotoolthreecontainers_web python ./static/python/models.py
docker run -i -t dockeragotoolthreecontainers_web bash

docker-compose run web /usr/local/bin/python create_db.py
docker-compose run web /usr/local/bin/python ./static/python/db_config.py
docker-compose run web /usr/local/bin/python ./static/python/models.py


##########################################################################################
### docker_agotool single container


docker build -t agotooldocker:agotool .
##########################################################################################
### centos_postgres
docker build -t cpg:cpg .
docker run -i -t -v /Users/dblyon/modules/cpr/metaprot/sql/tables:/tables cpg:cpg bash
docker run -it --link cpg:cpg postgres psql -h postgres -U postgres
docker run -it --link cpg:cpg postgres psql -h postgres -U postgres



tutorial video
docker pull postgres:latest
docker run -p 5432:5432 postgres
docker ps
psql -U postgres -h 192.168.59.103
--> postgres shell

after modifying container, we need to commit it to turn it into a new docker image
docker ps -l # most recently executed container
docker commit -m "setting blabla and bubu" e7ab tagname-redis

### random
docker-machine create --driver virtualbox default
# or
docker-machine start default
eval $(docker-machine env default)
docker-compose build
docker-compose up -d
# docker-compose run web /usr/local/bin/python create_db.py
docker-compose run web /usr/local/bin/python app.py
http://192.168.99.100/
docker-compose stop
docker-compose start
##########################################################################################
##########################################################################################
##########################################################################################
### The official and current Docker tutorial
docker build -t friendlyhello .  # Create image using this directory's Dockerfile
docker run -p 4000:80 friendlyhello  # Run "friendlyname" mapping port 4000 to 80
docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode
docker container ls                                # List all running containers
docker container ls -a             # List all containers, even those not running
docker container stop <hash>           # Gracefully stop the specified container
docker container kill <hash>         # Force shutdown of the specified container
docker container rm <hash>        # Remove specified container from this machine
docker container rm $(docker container ls -a -q)         # Remove all containers
docker image ls -a                             # List all images on this machine
docker image rm <image id>            # Remove specified image from this machine
docker image rm $(docker image ls -a -q)   # Remove all images from this machine
docker login             # Log in this CLI session using your Docker credentials
docker tag <image> username/repository:tag  # Tag <image> for upload to registry # docker tag friendlyhello dblyon/get-started:part2
docker push username/repository:tag            # Upload tagged image to registry # docker push dblyon/get-started:part2
docker run username/repository:tag                   # Run image from a registry # docker run -p 4000:80 dblyon/get-started:part2

docker stack ls                                            # List stacks or apps
docker stack deploy -c <composefile> <appname>  # Run the specified Compose file
docker service ls                 # List running services associated with an app
docker service ps <service>                  # List tasks associated with an app
docker inspect <task or container>                   # Inspect task or container
docker container ls -q                                      # List container IDs
docker stack rm <appname>                             # Tear down an application
docker swarm leave --force      # Take down a single node swarm from the manager

docker-machine create --driver virtualbox myvm1 # Create a VM (Mac, Win7, Linux)
docker-machine env myvm1                # View basic information about your node
docker-machine ssh myvm1 "docker node ls"         # List the nodes in your swarm
docker-machine ssh myvm1 "docker node inspect <node ID>"        # Inspect a node
docker-machine ssh myvm1 "docker swarm join-token -q worker"   # View join token
docker-machine ssh myvm1   # Open an SSH session with the VM; type "exit" to end
docker node ls                # View nodes in swarm (while logged on to manager)
docker-machine ssh myvm2 "docker swarm leave"  # Make the worker leave the swarm
docker-machine ssh myvm1 "docker swarm leave -f" # Make master leave, kill swarm
docker-machine ls # list VMs, asterisk shows which VM this shell is talking to
docker-machine start myvm1            # Start a VM that is currently not running
docker-machine env myvm1      # show environment variables and command for myvm1
eval $(docker-machine env myvm1)         # Mac command to connect shell to myvm1
docker stack deploy -c <file> <app>  # Deploy an app; command shell must be set to talk to manager (myvm1), uses local Compose file
docker-machine scp docker-compose.yml myvm1:~ # Copy file to node's home dir (only required if you use ssh to connect to manager and deploy the app)
docker-machine ssh myvm1 "docker stack deploy -c <file> <app>"   # Deploy an app using ssh (you must have first copied the Compose file to myvm1)
eval $(docker-machine env -u)     # Disconnect shell from VMs, use native docker
docker-machine stop $(docker-machine ls -q)               # Stop all running VMs
docker-machine rm $(docker-machine ls -q) # Delete all VMs and their disk images


docker build -t friendlyhello .  # Create image using this directory's Dockerfile
docker tag <image> username/repository:tag  # Tag <image> for upload to registry # docker tag friendlyhello dblyon/get-started:part2
docker push username/repository:tag            # Upload tagged image to registry # docker push dblyon/get-started:part2
docker run username/repository:tag                   # Run image from a registry # docker run -p 4000:80 dblyon/get-started:part2
docker swarm init


### check status
docker images
docker ps
docker container ls
docker-machine ls
docker stack ls
docker-machine ssh myvm1 "docker node ls"


# step by step (oh baby)
docker build -t friendlyhello .
docker run -p 80:80 friendlyhello
docker login
docker tag friendlyhello dblyon/get-started:part2
docker push dblyon/get-started:part2
docker run -p 80:80 dblyon/get-started:part2
docker swarm init
docker stack deploy -c docker-compose.yml getstartedlab
docker stack rm getstartedlab
docker swarm leave --force
docker-machine create --driver virtualbox myvm1
docker-machine create --driver virtualbox myvm2
docker-machine ssh myvm1 docker swarm init --advertise-addr 192.168.99.100
docker-machine ssh myvm2 docker swarm join --token SWMTKN-1-18i346cvlpbhg1snq5m217p2zpa5bd8fh9df1xj2s47se1ovet-93ltq0qhvlbuujskr83q0uas4 192.168.99.100:2377
docker-machine ssh myvm1 "docker node ls"
eval $(docker-machine env myvm1)
docker stack deploy -c docker-compose.yml getstartedlab # iterative
docker stack rm getstartedlab


# create named Volume and copy data to it
docker volume create
